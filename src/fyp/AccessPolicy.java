/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fyp;

import javax.swing.JOptionPane;

/**
 *
 * @author Harikrish
 */
public class AccessPolicy extends javax.swing.JFrame {

    /**
     * Creates new form AccessPolicy
     */
    public String result="",user_email="",filename="";
    int count=0;
    public AccessPolicy(String login_email,String file) {
        user_email=login_email;
        filename=file;
        initComponents();
        for(int i=1;i<=31;i++)
        {
            date.addItem(i);
        }
        for(int i=1960;i<=2015;i++)
        {
            year.addItem(i);
        }
        date.setSelectedIndex(-1);
        year.setSelectedIndex(-1);
        roll.setEnabled(false);
        firstname.setEnabled(false);
        lastname.setEnabled(false);
        email.setEnabled(false);
        male.setEnabled(false);
        female.setEnabled(false);
        phone.setEnabled(false);
        country.setEnabled(false);
        city.setEnabled(false);
        college.setEnabled(false);
        branch.setEnabled(false);
        department.setEnabled(false);
        date.setEnabled(false);
        month.setEnabled(false);
        year.setEnabled(false);
        type.setEnabled(false);
        student_year.setEnabled(false);
        staff_year.setEnabled(false);
        count_text.setEnabled(false);
        student_check.setEnabled(false);
        experience_check.setEnabled(false);
        buttonGroup1.add(male);
        buttonGroup1.add(female);
        res.setVisible(false);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        roll_check = new javax.swing.JCheckBox();
        firstname_check = new javax.swing.JCheckBox();
        lastname_check = new javax.swing.JCheckBox();
        email_check = new javax.swing.JCheckBox();
        phone_check = new javax.swing.JCheckBox();
        sex_check = new javax.swing.JCheckBox();
        roll = new javax.swing.JTextField();
        firstname = new javax.swing.JTextField();
        lastname = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        phone = new javax.swing.JTextField();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        country_check = new javax.swing.JCheckBox();
        city_check = new javax.swing.JCheckBox();
        college_check = new javax.swing.JCheckBox();
        branch_check = new javax.swing.JCheckBox();
        department_check = new javax.swing.JCheckBox();
        dob_check = new javax.swing.JCheckBox();
        country = new javax.swing.JComboBox();
        city = new javax.swing.JComboBox();
        college = new javax.swing.JComboBox();
        branch = new javax.swing.JComboBox();
        department = new javax.swing.JComboBox();
        date = new javax.swing.JComboBox();
        month = new javax.swing.JComboBox();
        year = new javax.swing.JComboBox();
        type_check = new javax.swing.JCheckBox();
        type = new javax.swing.JComboBox();
        student_check = new javax.swing.JCheckBox();
        staff_year = new javax.swing.JTextField();
        experience_check = new javax.swing.JCheckBox();
        student_year = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        count_text = new javax.swing.JTextField();
        user_count = new javax.swing.JTextField();
        policy = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        res = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Access Policy");

        roll_check.setText("Roll No");
        roll_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roll_checkItemStateChanged(evt);
            }
        });

        firstname_check.setText("First name");
        firstname_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                firstname_checkItemStateChanged(evt);
            }
        });
        firstname_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstname_checkActionPerformed(evt);
            }
        });

        lastname_check.setText("Last name");
        lastname_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lastname_checkItemStateChanged(evt);
            }
        });

        email_check.setText("Email Id");
        email_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                email_checkItemStateChanged(evt);
            }
        });

        phone_check.setText("Phone No");
        phone_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                phone_checkItemStateChanged(evt);
            }
        });

        sex_check.setText("Sex");
        sex_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sex_checkItemStateChanged(evt);
            }
        });

        male.setText("Male");

        female.setText("Female");

        country_check.setText("Country");
        country_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                country_checkItemStateChanged(evt);
            }
        });

        city_check.setText("city");
        city_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                city_checkItemStateChanged(evt);
            }
        });

        college_check.setText("College");
        college_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                college_checkItemStateChanged(evt);
            }
        });

        branch_check.setText("Branch");
        branch_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                branch_checkItemStateChanged(evt);
            }
        });

        department_check.setText("Department");
        department_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                department_checkItemStateChanged(evt);
            }
        });

        dob_check.setText("Date of Birth");
        dob_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dob_checkItemStateChanged(evt);
            }
        });

        country.setMaximumRowCount(100);
        country.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "a" }));
        country.setSelectedIndex(-1);

        city.setMaximumRowCount(100);
        city.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "c" }));
        city.setSelectedIndex(-1);

        college.setMaximumRowCount(4);
        college.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CEG", "MIT", "ACT", "SAP" }));
        college.setSelectedIndex(-1);

        branch.setMaximumRowCount(100);
        branch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "B.E", "B.A", "B.Arch", "B.Com", "B.Sc", "B.Tech", "BBA", "BCA", "DEEE", "Diploma", "Dual Degree", "Intermediate", "M.A", "M.E", "M.Sc", "M.Sc(Integrated)", "M.Tech", "MBA", "MCA", "MS", "Ph.D", "Other" }));
        branch.setSelectedIndex(-1);

        department.setMaximumRowCount(500);
        department.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aeronautical Engineering", "Aerospace Engineering", "Agricultural & Irrigation Engineering", "Aircraft Maintenance Engineering", "Animation", "Apparel technology", "Applied electronics", "Applied Mathematics", "Architecture", "Automobile Engineering", "Avionics", "Bio Informatics", "Bio Medical Engineering", "Biotechnology", "Ceramic Technology", "Charted Accountancy", "Chemical Engineering", "Chemistry", "Civil Engineering", "Communication Systems", "Computer Science & Engineering", "Cryogenic Engineering", "Elecrical Engineering", "Electrical & Electronics Engineering", "Electronic media", "Electronics & Communication Engineering", "Electronics & Instrumentation", "Embedded Systems", "Energy Engineering", "Engineering Design", "Engineering Physics", "English Literature", "Finance", "Fluid Mechanics", "Food Technology", "Geo Informatics", "Harbour Engineering", "High Voltage Engineering", "Hospitality Administration", "HR", "Humanities & Social Sciences", "Industrial Engineering", "Information & Communications Technology", "Information Technology", "Internal Combustion Engineering", "Logistics", "M.Sc. CS-IT", "M.Sc. E-Media", "Manufacturing Engineering", "Marine Engineering", "Marketing", "Material Science", "Mathematics", "Mechanical Engineering", "Mechatronics", "Media Sciences", "Metallurgy", "Mining Engineering", "Nano Science and Technology", "Photonics", "Physics", "Printing Technology", "Production Engineering", "Remote Sensing", "Software Engineering", "Systems Engineering & Operations Research", "Technology Managment", "Telecommunication Engineering", "Textile Technology", "Theoretical Computer Science", "Thermal", "Transportation Engineering", "VLSI Design", "Other" }));
        department.setSelectedIndex(-1);

        date.setMaximumRowCount(50);

        month.setMaximumRowCount(12);
        month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "Juky", "August", "October", "November", "December" }));
        month.setSelectedIndex(-1);

        year.setMaximumRowCount(500);

        type_check.setText("Type");
        type_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                type_checkItemStateChanged(evt);
            }
        });

        type.setMaximumRowCount(10);
        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "student", "staff" }));
        type.setSelectedIndex(-1);
        type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeItemStateChanged(evt);
            }
        });
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });

        student_check.setText("Student  Year");
        student_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                student_checkItemStateChanged(evt);
            }
        });

        staff_year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staff_yearActionPerformed(evt);
            }
        });

        experience_check.setText("Experience");
        experience_check.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                experience_checkItemStateChanged(evt);
            }
        });

        student_year.setMaximumRowCount(10);
        student_year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        student_year.setSelectedIndex(-1);
        student_year.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                student_yearItemStateChanged(evt);
            }
        });
        student_year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                student_yearActionPerformed(evt);
            }
        });

        jLabel2.setText("of");

        policy.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        policy.setText("Generate Policy");
        policy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                policyActionPerformed(evt);
            }
        });

        res.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(branch_check)
                                    .addComponent(department_check)
                                    .addComponent(college_check)
                                    .addComponent(city_check)
                                    .addComponent(country_check))
                                .addGap(30, 30, 30))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(phone_check)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(roll_check)
                                            .addComponent(firstname_check)
                                            .addComponent(lastname_check)
                                            .addComponent(email_check))
                                        .addGap(11, 11, 11)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(email)
                                            .addComponent(firstname, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(roll, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lastname)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(sex_check)
                                        .addGap(45, 45, 45)
                                        .addComponent(male)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(female)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(171, 171, 171))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(dob_check)
                                .addGap(26, 26, 26)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(college, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(branch, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(department, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(city, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(res)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(policy)
                        .addGap(153, 153, 153)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(type_check)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(student_check)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(student_year, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(experience_check)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(user_count, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(count_text, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(staff_year, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(327, 327, 327))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roll_check)
                    .addComponent(roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(country_check)
                    .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(type_check)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstname_check)
                            .addComponent(firstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(city_check)
                            .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastname_check)
                            .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(college_check)
                            .addComponent(college, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(email_check)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(branch_check)
                            .addComponent(branch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phone_check)
                            .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(department_check)
                            .addComponent(department, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sex_check)
                            .addComponent(male)
                            .addComponent(female)
                            .addComponent(dob_check)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(student_check)
                            .addComponent(student_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(experience_check)
                            .addComponent(staff_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(count_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(user_count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(policy)
                    .addComponent(res))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firstname_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstname_checkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstname_checkActionPerformed

    private void staff_yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staff_yearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_staff_yearActionPerformed

    private void roll_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_roll_checkItemStateChanged
        // TODO add your handling code here:
        if(roll_check.isSelected())
        {
            roll.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            roll.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_roll_checkItemStateChanged

    private void firstname_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_firstname_checkItemStateChanged
        // TODO add your handling code here:
        if(firstname_check.isSelected())
        {
            firstname.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            firstname.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_firstname_checkItemStateChanged

    private void lastname_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lastname_checkItemStateChanged
        // TODO add your handling code here:
        if(lastname_check.isSelected())
        {
            lastname.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            lastname.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_lastname_checkItemStateChanged

    private void email_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_email_checkItemStateChanged
        // TODO add your handling code here:
        if(email_check.isSelected())
        {
            email.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            email.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_email_checkItemStateChanged

    private void phone_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_phone_checkItemStateChanged
        // TODO add your handling code here:
        if(phone_check.isSelected())
        {
            phone.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            phone.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_phone_checkItemStateChanged

    private void sex_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sex_checkItemStateChanged
        // TODO add your handling code here:
        if(sex_check.isSelected())
        {
            male.setEnabled(true);
            female.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            male.setEnabled(false);
            female.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_sex_checkItemStateChanged

    private void country_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_country_checkItemStateChanged
        // TODO add your handling code here:
        if(country_check.isSelected())
        {
            country.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            country.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_country_checkItemStateChanged

    private void city_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_city_checkItemStateChanged
        // TODO add your handling code here:
        if(city_check.isSelected())
        {
            city.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            city.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_city_checkItemStateChanged

    private void college_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_college_checkItemStateChanged
        // TODO add your handling code here:
        if(college_check.isSelected())
        {
            college.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            college.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_college_checkItemStateChanged

    private void branch_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_branch_checkItemStateChanged
        // TODO add your handling code here:
        if(branch_check.isSelected())
        {
            branch.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            branch.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_branch_checkItemStateChanged

    private void department_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_department_checkItemStateChanged
        // TODO add your handling code here:
        if(department_check.isSelected())
        {
            department.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            department.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_department_checkItemStateChanged

    private void dob_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dob_checkItemStateChanged
        // TODO add your handling code here:
        if(dob_check.isSelected())
        {
            date.setEnabled(true);
            count++;
            month.setEnabled(true);
            count++;
            year.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            date.setEnabled(false);
            count--;
            month.setEnabled(false);
            count--;
            year.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_dob_checkItemStateChanged

    private void type_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_type_checkItemStateChanged
        // TODO add your handling code here:
        if(type_check.isSelected())
        {
            type.setEnabled(true);
            count++;
            count_text.setText(count+"");
        }
        else
        {
            type.setEnabled(false);
            experience_check.setEnabled(false);
            staff_year.setEnabled(false);
            student_check.setEnabled(false);
            student_year.setEnabled(false);
            count--;
            count_text.setText(count+"");
        }
    }//GEN-LAST:event_type_checkItemStateChanged

    private void typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeItemStateChanged
        // TODO add your handling code here:
        String name=type.getSelectedItem().toString();
        if(name=="student")
        {
            student_check.setEnabled(true);
            student_year.setEnabled(true);
            experience_check.setEnabled(false);
            staff_year.setEnabled(false);
            
            
        }
        else if(name=="staff")
        {
            student_check.setEnabled(false);
            student_year.setEnabled(false);
            experience_check.setEnabled(true);
            staff_year.setEnabled(true);
        }
            
    }//GEN-LAST:event_typeItemStateChanged

    private void policyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_policyActionPerformed
        // TODO add your handling code here:
        result="";
        
        if(((Integer.parseInt(user_count.getText()) > 1 && Integer.parseInt(count_text.getText())>1))|| user_count.getText()=="")
        {
        if(roll.getText() !="" && roll_check.isSelected())
        {
            result+="roll:"+roll.getText().replaceAll("\\s+","")+" ";
        }
        if(firstname.getText()!="" && firstname_check.isSelected())
        {
            result+="firstname:"+firstname.getText().replaceAll("\\s+","")+" ";
        }
        if(lastname.getText()!="" && lastname_check.isSelected())
        {
            result+="lastname:"+lastname.getText().replaceAll("\\s+","")+" ";
        }
        if(email.getText()!="" && email_check.isSelected())
        {
            result+="email:"+email.getText().replaceAll("\\s+","")+" ";
        }
        if(phone.getText()!="" && phone_check.isSelected())
        {
            result+="phone:"+phone.getText().replaceAll("\\s+","")+" ";
        }
        if(male.isSelected() && sex_check.isSelected())
        {
            result+="sex:"+male.getText().replaceAll("\\s+","")+" ";
        }
        if(female.isSelected() && sex_check.isSelected())
        {
            result+="sex:"+female.getText().replaceAll("\\s+","")+" ";
        }
        if(country.getSelectedItem() !="" && country_check.isSelected())
        {
            result+="country:"+country.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(city.getSelectedItem() !="" && city_check.isSelected())
        {
            result+="city:"+city.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(college.getSelectedItem() !="" && college_check.isSelected())
        {
            result+="college:"+college.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(branch.getSelectedItem() !="" && branch_check.isSelected())
        {
            result+="branch:"+branch.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(department.getSelectedItem() !="" && department_check.isSelected())
        {
            result+="department:"+department.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(date.getSelectedItem()!="" && dob_check.isSelected())
        {
            result+="data:"+date.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(month.getSelectedItem()!="" && dob_check.isSelected())
        {
            result+="month:"+month.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(year.getSelectedItem()!="" && dob_check.isSelected())
        {
            result+="year:"+year.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(type.getSelectedItem() !="" && type_check.isSelected())
        {
            result+="type:"+type.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(student_year.getSelectedItem() !="" && student_check.isSelected())
        {
            result+="experience:"+student_year.getSelectedItem().toString().replaceAll("\\s+","")+" ";
        }
        if(staff_year.getText() !="" && experience_check.isSelected())
        {
            result+="experience:"+staff_year.getText().replaceAll("\\s+","")+" ";
        }
            
        result+=user_count.getText()+"of"+count_text.getText();
        DBConfig db=new DBConfig();
        db.insertPolicy(user_email, filename, result);
        db=null;
        System.out.println("result = " + result);
        res.setText(result);
        this.dispose();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Policy set must be grater than 1");
        }
        
    }//GEN-LAST:event_policyActionPerformed

    private void student_yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_student_yearActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_student_yearActionPerformed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeActionPerformed

    private void student_yearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_student_yearItemStateChanged
        

    }//GEN-LAST:event_student_yearItemStateChanged

    private void student_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_student_checkItemStateChanged
        // TODO add your handling code here:
         if(student_check.isSelected())
        {            
        count++;
        count_text.setText(count+"");
        }
        else
        {
            count--;
            count_text.setText(count+"");
        }

    }//GEN-LAST:event_student_checkItemStateChanged

    private void experience_checkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_experience_checkItemStateChanged
        // TODO add your handling code here:
         if(experience_check.isSelected())
        {            
        count++;
        count_text.setText(count+"");
        }
        else
        {
            count--;
            count_text.setText(count+"");
        }

    }//GEN-LAST:event_experience_checkItemStateChanged
    public String getPolicy()
    {
        return result;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccessPolicy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccessPolicy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccessPolicy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccessPolicy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // new AccessPolicy().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox branch;
    private javax.swing.JCheckBox branch_check;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox city;
    private javax.swing.JCheckBox city_check;
    private javax.swing.JComboBox college;
    private javax.swing.JCheckBox college_check;
    private javax.swing.JTextField count_text;
    private javax.swing.JComboBox country;
    private javax.swing.JCheckBox country_check;
    private javax.swing.JComboBox date;
    private javax.swing.JComboBox department;
    private javax.swing.JCheckBox department_check;
    private javax.swing.JCheckBox dob_check;
    private javax.swing.JTextField email;
    private javax.swing.JCheckBox email_check;
    private javax.swing.JCheckBox experience_check;
    private javax.swing.JRadioButton female;
    private javax.swing.JTextField firstname;
    private javax.swing.JCheckBox firstname_check;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField lastname;
    private javax.swing.JCheckBox lastname_check;
    private javax.swing.JRadioButton male;
    private javax.swing.JComboBox month;
    private javax.swing.JTextField phone;
    private javax.swing.JCheckBox phone_check;
    public javax.swing.JButton policy;
    public javax.swing.JLabel res;
    public javax.swing.JTextField roll;
    private javax.swing.JCheckBox roll_check;
    private javax.swing.JCheckBox sex_check;
    private javax.swing.JTextField staff_year;
    private javax.swing.JCheckBox student_check;
    private javax.swing.JComboBox student_year;
    private javax.swing.JComboBox type;
    private javax.swing.JCheckBox type_check;
    private javax.swing.JTextField user_count;
    private javax.swing.JComboBox year;
    // End of variables declaration//GEN-END:variables
}
